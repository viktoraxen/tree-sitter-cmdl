=============
Simple component
=============

component Xor(a, b) => x
end

---

(source_file
  (component
    (identifier)
    (component_inputs
      (identifier)
      (identifier))
    (component_outputs
      (identifier))))

=============
Simple synchronized
=============

synchronized Xor(a, b) => x
end

---

(source_file
  (component
    (identifier)
    (component_inputs
      (identifier)
      (identifier))
    (component_outputs
      (identifier))))

=============
Component signature width
=============

component Xor(a: 4, b) => x: 3
end

---

(source_file
  (component
    (identifier)
    (component_inputs
      (signal_definition
        (identifier)
        (number))
      (identifier))
    (component_outputs
      (signal_definition
        (identifier)
        (number)))))

=============
Nestled component
=============

component Xor(a, b) => x
    component Nor(a, b, c) => x, y
    end
end

---

(source_file
    (component
      (identifier)
      (component_inputs
        (identifier)
        (identifier))
      (component_outputs
        (identifier))
      (component_body
        (component
          (identifier)
          (component_inputs
            (identifier)
            (identifier)
            (identifier))
          (component_outputs
            (identifier)
            (identifier))))))

=============
Nestled components with statements
=============

component Xor(a, b) => x
    x <= a and b
    component Nor(a, b, c) => x, y
        signal z <= y
    end
end

---

(source_file
    (component
      (identifier)
      (component_inputs
        (identifier)
        (identifier))
      (component_outputs
        (identifier))
      (component_body
        (assignment
          (identifier)
          (expression_binary
            (identifier)
            (identifier)))
        (component
          (identifier)
          (component_inputs
            (identifier)
            (identifier)
            (identifier))
          (component_outputs
            (identifier)
            (identifier))
          (component_body
            (declaration
              (identifier)
              (identifier)))))))

=============
Multiple components
=============

component Xor(a, b) => x
end

component Nor(a, b) => x
end

---

(source_file
  (component
    (identifier)
    (component_inputs
      (identifier)
      (identifier))
    (component_outputs
      (identifier)))
  (component
    (identifier)
    (component_inputs
      (identifier)
      (identifier))
    (component_outputs
      (identifier))))

===========
Number as input
:error
===========

component(a, 1) => x
end

---

===========
Number as output
:error
===========

component(a, b) => 4
end

---

===========
Empty input
:error
===========

component() => x
end

---

===========
Empty output
:error
===========

component(a, b) =>
end

---
