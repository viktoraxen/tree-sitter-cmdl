=============
Unary expression
=============

a <= not b

---

(source_file
  (assignment
    (identifier)
    (expression_unary
      (identifier))))

=============
Constant expression
=============

a <= 3

---

(source_file
  (assignment
    (identifier)
    (number)))

=============
Constant expression width
=============

a <= 3: 4

---

(source_file
  (assignment
    (identifier)
    (constant
      (number)
      (number))))

=============
Binary expression
=============

a <= b and c

---

(source_file
  (assignment
    (identifier)
    (expression_binary
      (identifier)
      (identifier))))

==============
Left hand precedence
==============

a <= 0 and c and d

---

(source_file
  (assignment
    (identifier)
    (expression_binary
      (expression_binary
        (number)
        (identifier))
      (identifier))))

==============
Parentheses precedence
==============

a <= 0 and (c and d)

---

(source_file
  (assignment
    (identifier)
    (expression_binary
      (number)
      (expression_binary
        (identifier)
        (identifier)))))

=============
Expression precedence
=============

a <= not a and b or c

---

(source_file
  (assignment
    (identifier)
    (expression_binary
      (expression_binary
        (expression_unary
          (identifier))
        (identifier))
      (identifier))))


==============
Component
==============

a <= Xor(d, g)

---

(source_file
  (assignment
    (identifier)
    (expression_component
      (identifier)
      (expression_component_input_list
        (identifier)
        (identifier)))))

==============
Component in expression
==============

a <= Xor(d, g) and b

---

(source_file
  (assignment
    (identifier)
    (expression_binary
      (expression_component
        (identifier)
        (expression_component_input_list
          (identifier)
          (identifier)))
      (identifier))))

==============
Component reference
==============

a <= Xor::Nor(d, g)

---

(source_file
  (assignment
    (identifier)
    (expression_component
      (component_reference
        (identifier)
        (identifier))
      (expression_component_input_list
        (identifier)
        (identifier)))))

==============
Component subscript input
==============

a <= Xor::Nor(d.5, g)

---

(source_file
  (assignment
    (identifier)
      (expression_component
        (component_reference
          (identifier)
          (identifier))
        (expression_component_input_list
          (expression_subscript
            (identifier)
            (number))
          (identifier)))))

==============
Chained unary
==============

b <= not not not not a

---

(source_file
  (assignment
    (identifier)
    (expression_unary
      (expression_unary
        (expression_unary
          (expression_unary
            (identifier)))))))
